{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","_ref$label","label","_ref$required","required","_ref$onChange","onChange","_useState","useState","concat","Math","random","toString","slice","id","_slicedToArray","_useState3","_useState4","touched","setTouched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","initialFormState","newTitle","newDescription","newImgUrl","newImdbUrl","newImdbId","NewMovie","onAdd","_useState2","count","setCount","newMovieInfo","setNewMovieInfo","handleChange","formField","pevMovieInfo","_objectSpread","_defineProperty","trimTextField","textField","trim","handleSubmit","preventDefault","newMovie","prevCount","onSubmit","newValue","disabled","App","moviesFromServer","setMovies","movieToAdd","prevMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c15d8ffb.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movieToAdd: Movie) => void;\n}\n\nconst initialFormState = {\n  newTitle: '',\n  newDescription: '',\n  newImgUrl: '',\n  newImdbUrl: '',\n  newImdbId: '',\n};\n\nexport const NewMovie: React.FC <Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [newMovieInfo, setNewMovieInfo] = useState(initialFormState);\n\n  const {\n    newTitle,\n    newDescription,\n    newImgUrl,\n    newImdbUrl,\n    newImdbId,\n  } = newMovieInfo;\n\n  const handleChange = (formField: string | number, value: string | number) => {\n    setNewMovieInfo((pevMovieInfo) => ({\n      ...pevMovieInfo,\n      [formField]: value,\n    }));\n  };\n\n  const clearForm = () => {\n    setNewMovieInfo(initialFormState);\n  };\n\n  const trimTextField = (textField: string): string => textField.trim();\n\n  const canUseButton = () => {\n    return (\n      trimTextField(newTitle)\n      && trimTextField(newImgUrl)\n      && trimTextField(newImdbUrl)\n      && trimTextField(newImdbId)\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title: trimTextField(newTitle),\n      description: trimTextField(newDescription),\n      imgUrl: trimTextField(newImgUrl),\n      imdbUrl: trimTextField(newImdbUrl),\n      imdbId: trimTextField(newImdbId),\n    };\n\n    onAdd(newMovie);\n    setCount((prevCount) => prevCount + 1);\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newTitle}\n        onChange={(newValue) => handleChange('newTitle', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newDescription}\n        onChange={(newValue) => handleChange('newDescription', newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newImgUrl}\n        onChange={(newValue) => handleChange('newImgUrl', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newImdbUrl}\n        onChange={(newValue) => handleChange('newImdbUrl', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newImdbId}\n        onChange={(newValue) => handleChange('newImdbId', newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          {canUseButton()\n            ? (\n              <button\n                type=\"submit\"\n                data-cy=\"submit-button\"\n                className=\"button is-link\"\n              >\n                Add\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                data-cy=\"submit-button\"\n                className=\"button is-link\"\n                disabled\n              >\n                Add\n              </button>\n            )}\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (movieToAdd: Movie): void => {\n    setMovies((prevMovies) => [...prevMovies, movieToAdd]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}